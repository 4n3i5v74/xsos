#!/bin/bash
# xsos v0.0.6a last mod 2012/10/03
# Latest version at <http://github.com/ryran/xsos>
# Copyright 2012 Ryan Sawhill <rsaw@redhat.com>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#    General Public License <gnu.org/licenses/gpl.html> for more details.
#-------------------------------------------------------------------------------

# So much still to do ... Suggestions always welcome though.

# To make it easy to rename the script filename
pzero=${0##*/}

# Get version from line #2
version=$(sed '2q;d' $0)

# mem_unit can be k, m, or g and is used by the meminfo-code
# Change the default here to avoid having to use cmd-line options
# You can also change the formatting to suit your preference, e.g.
#   mem_unit=" GiB"
# If you change it like that, you'll need to tweak 2 of the meminfo
# awk command's if statements to account for that.
mem_unit="g"

# Variables used a few times for indentation
H2INDENT="    "
H3INDENT="      "

# Colors and colors and colors oh my
declare -A C
C[reset]='\033[0;0m';   C[grey]='\033[00;30m'; C[GREY]='\033[01;30m'
C[red]='\033[0;31m';    C[RED]='\033[1;31m';
C[green]='\033[0;32m';  C[GREEN]='\033[1;32m';
C[orange]='\033[0;33m'; C[ORANGE]='\033[1;33m';
C[blue]='\033[0;34m';   C[BLUE]='\033[1;34m';
C[purple]='\033[0;35m'; C[PURPLE]='\033[1;35m';
C[cyan]='\033[0;36m';   C[CYAN]='\033[1;36m'


USAGE() {
  echo "Usage: $pzero [-xKMabocmdpleins] [SOSREPORT-ROOT]"
  echo "  or:  $pzero [--B|--C|--M|--D|--L|--I|--N FILE]..."
  echo "  or:  $pzero [-?|-h|--help]"
}


XHELP() {
  USAGE
  echo "Extract useful data about system from SOSREPORT-ROOT or else localhost

Content options:"
  echo "
 -a, --all@show everything
 -b, --bios@show info from dmidecode
 -o, --os@show release, hostname, uptime, loadavg, cmdline
 -c, --cpu@show info from /proc/cpuinfo
 -m, --mem@show info from /proc/meminfo
 -d, --disks@show info from /proc/partitions
 -p, --mpath@show info from multipath
 -l, --lspci@show info from lspci
 -e, --ethtool@show info from ethtool
 -i, --ip@show info from ip addr
 -n, --net@show info from /proc/net/dev
 -s, --sysctl@show important kernel sysctls" | column -ts@
  echo "
Display options:"
  echo "
 -x, --nocolor@disable coloring of output
 -K, --kb@show /proc/meminfo in KiB
 -M, --mb@show /proc/meminfo in MiB" | column -ts@
 echo "
Note that $pzero argument parsing is performed by GNU getopt, so order of args
is not important (e.g. the SOSREPORT-ROOT could be the 1st argument).

If no content options are specified, $pzero only shows some information,
equivalent to:

  $pzero --os --cpu --mem
  
If SOSREPORT-ROOT isn't provided, the data will be gathered from the localhost;
however, bios, multipath, and ethtool output will only be displayed if running
as root (UID 0). When executing in this manner as non-root, those modules will
be silently skipped, even if explicitly requested.

Sometimes a full sosreport isn't available; sometimes you simply have a
dmidecode-dump or the contents of /proc/meminfo and you'd like a summary...

Special options:"
  echo "
 --B=FILE@FILE must contain dmidecode dump
 --C=FILE@FILE must contain /proc/cpuinfo dump
 --M=FILE@FILE must contain /proc/meminfo dump
 --D=FILE@FILE must contain /proc/partitions dump
 --L=FILE@FILE must contain lspci dump
 --I=FILE@FILE must contain ip addr dump
 --N=FILE@FILE must contain /proc/net/dev dump" | column -ts@
  echo "
As is hopefully clear, each of these options requires a filename as an
argument. These options can be used together, but cannot be used in concert
with regular 'Content options' -- Content opts are ignored if Special options
are detected. Also note: the '=' can be replaced with a space if desired.
 
Version info: ${version:2}
Report bugs or suggestions to <rsaw@redhat.com>
Or see <github.com/ryran/xsos> for bug tracker & latest version
Alternatively, run $pzero with '--update|-U'"
  exit
}


UPDATE() {
  echo -e "${C[blue]}Checking $0 against latest version at github.com/ryran/xsos ...${C[GREY]}\n"
  latest_version_file=$(mktemp /tmp/xsos_latest.XXX)
  trap "rm $latest_version_file" EXIT

  # Download latest version of xsos with wget or curl
  if command -v wget >/dev/null; then
    wget https://raw.github.com/ryran/xsos/master/xsos -O $latest_version_file
  elif command -v curl >/dev/null; then
    curl https://raw.github.com/ryran/xsos/master/xsos -o $latest_version_file; echo
  else
    echo -e "${C[RED]}Need either wget or curl in \$PATH to perform the download!${C[reset]}"
    exit 255
  fi
  
  # Save version string
  latest_version=$(sed '2q;d' $latest_version_file)

  # Compare currently running xsos with downloaded file
  if ! diff $0 $latest_version_file >/dev/null; then
    echo -e "${C[blue]}The version you are running reports as:\n\t${C[orange]}${version:2}${C[blue]}\nThe version on github appears to be different and reports as:\n\t${C[ORANGE]}${latest_version:2}${C[blue]}"
    echo -e "Would you like to see differences between them? (${C[GREEN]}y${C[blue]} or ${C[GREEN]}n${C[blue]})${C[GREEN]}"
    read -p "> "
    if [[ $REPLY == y ]]; then
      if [[ -n $DISPLAY ]] && command -v meld >/dev/null; then
        meld $0 $latest_version_file 2>/dev/null
      elif [[ -n $DISPLAY ]] && command -v gvimdiff >/dev/null; then
        gvimdiff $0 $latest_version_file 2>/dev/null
      elif command -v vimdiff; then
        vimdiff $0 $latest_version_file
      else
        # set name of tmp diff file
        diff_file=$(mktemp /tmp/xsos.XXX.patch); trap "rm $diff_file" EXIT;
        # create a diff file
        diff -u $0 $latest_version_file > $diff_file
        if [[ -n $DISPLAY ]] && command -v gedit >/dev/null; then
          gedit $diff_file 2>/dev/null
        else
          less $diff_file
        fi
      fi
    fi
    echo -e "${C[blue]}If you are sure you know what you are doing, type ${C[GREEN]}u${C[blue]}\nto replace $0 with the latest version${C[GREEN]}"
    read -p "> "
    if [[ $REPLY == u ]]; then
      echo -e "${C[blue]}Backing up current version and replacing it with downloaded version ...${C[cyan]}"
      cp -v $0 /tmp/xsos.orig
      cp -v $latest_version_file $0
      chmod +x $0
      echo -e "${C[reset]}"
    else
      echo -e "${C[cyan]}Not performing update${C[reset]}\n"
    fi
  else
    echo -e "${C[blue]}$0 is the same version as what is on github, i.e.,\n\t${C[BLUE]}${version:2}${C[reset]}\n"
  fi
  exit
}


# Check for help or update
case $1 in
  -h|--help|help|-\?) XHELP
;;
  -U|--update) UPDATE
esac


# GNU getopt short and long options:
sopts='xKMabocmdpleins'
lopts='nocolor,kb,mb,all,bios,os,cpu,mem,disks,mpath,lspci,ethtool,ip,net,sysctl,B:,C:,M:,D:,L:,I:,N:'

# Check for bad switches
getopt -Q --name=$pzero -o $sopts -l $lopts -- "$@" || { USAGE; exit 1; }

# Setup assoc array for single-file options
unset sfile
declare -A sfile

# Parse command-line arguments
PARSE() {
  unset opts nocolor kb mb all bios os cpu mem disks mpath lspci ethtool ip net sysctl
  until [[ $1 = -- ]]; do
    case $1 in
      -x|--nocolor) shift; nocolor=y          ;;
      -K|--kb)      shift; mem_unit="k"       ;;
      -M|--mb)      shift; mem_unit="m"       ;;
      -a|--all)     shift; opts=y; all=y      ;;
      -b|--bios)    shift; opts=y; bios=y     ;;
      -o|--os)      shift; opts=y; os=y       ;;
      -c|--cpu)     shift; opts=y; cpu=y      ;;
      -m|--mem)     shift; opts=y; mem=y      ;;
      -d|--disks)   shift; opts=y; disks=y    ;;
      -p|--mpath)   shift; opts=y; mpath=y    ;;
      -l|--lspci)   shift; opts=y; lspci=y    ;;
      -e|--ethtool) shift; opts=y; ethtool=y  ;;
      -i|--ip)      shift; opts=y; ip=y       ;;
      -n|--net)     shift; opts=y; net=y      ;;
      -s|--sysctl)  shift; opts=y; sysctl=y   ;;
      --B)  sfile[B]=$2; shift 2  ;;
      --C)  sfile[C]=$2; shift 2  ;;
      --M)  sfile[M]=$2; shift 2  ;;
      --D)  sfile[D]=$2; shift 2  ;;
      --L)  sfile[L]=$2; shift 2  ;;
      --I)  sfile[I]=$2; shift 2  ;;
      --N)  sfile[N]=$2; shift 2  ;;
    esac
  done
  shift #(to get rid of the '--')
  sosroot=$1
}

# Call the parser
PARSE $(getopt -u --name=$pzero -o $sopts -l $lopts -- "$@")


# If at least one special option was used appropriately with a file,
# we'll do that instead of other content
if [[ -n ${sfile[*]} ]]; then
  :
# Set default view if no content options specified
elif [[ -z $opts ]]; then
  os=y; cpu=y; mem=y
# Else, if "all" option specified, set full view
elif [[ -n $all ]]; then
  bios=y; os=y; cpu=y; mem=y; disks=y; mpath=y; lspci=y; ethtool=y; ip=y; net=y; sysctl=y
fi


# Uncomment the following if you'd like to disable colors by default
# nocolor=y

# If color should be disabled, don't initialize colors
if [[ $nocolor == y ]]; then
  unset C c_0 c_h1 c_h2 c_h3 c_imp c_sep c_up c_down
# Taste the rainbow
else
  c_0=${C[reset]}
  c_h1=${C[RED]}
  c_h2=${C[PURPLE]}
  c_h3=${C[blue]}
  c_imp=${C[cyan]}
  c_sep=${C[GREY]}
  c_up=${C[green]}
  c_down=${C[orange]}
fi

# The following acts as a separator between content modules.
# Feel free to comment it out if you don't like it
heading_separator="$c_sep-------------------------------------------------------------------------------$c_0\n"


DMIDECODE() {
  [[ -z $1 ]] && dmidecode=$(dmidecode 2>/dev/null) || dmidecode=$(<"$1")
  echo -e "${c_h1}DMIDECODE${c_0}"
  # Prints "<BIOS Vendor>, <BIOS Version>, <BIOS Release Date>"
  echo -e "${c_h2}  BIOS:${c_0}"
  awk 'BEGIN { RS="\nHandle" } /BIOS Information/' <<<"$dmidecode" |
    awk -F: '
      /Vendor:/       { Vendor      = $2 }
      /Version:/      { Version     = $2 }
      /Release Date:/ { ReleaseDate = $2 }
      END { printf "   %s, version%s,%s\n", Vendor, Version, ReleaseDate }
    '
  # Prints <SYSTEM Manufacturer>, <SYSTEM Product Name>, <SYSTEM Version>, <SYSTEM Serial Number>, <SYSTEM UUID>
  echo -e "${c_h2}  System:${c_0}"
  awk 'BEGIN { RS="\nHandle" } /System Information/' <<<"$dmidecode" |
    awk -F: -vH3="$c_h3" -vH2="$c_h2" -vH0="$c_0" -vH_IMP="$c_imp" '
      /Manufacturer:/ { Mfr     = $2 }
      /Product Name:/ { Product = $2 }
      /Version:/      { Version = $2 }
      /Serial Number:/{ Serial  = $2 }
      /UUID:/         { UUID    = $2 }
      END {
        printf "    %sMfr:%s %s\n", H3, H0, Mfr
        printf "    %sProd:%s%s\n", H3, H0, Product
        printf "    %sVers:%s%s\n", H3, H0, Version
        printf "    %sSer:%s %s\n", H3, H0, Serial
        printf "    %sUUID:%s%s\n", H3, H0, UUID
      }
    '
  # Prints <CPU Manufacturer>, <CPU Family>, <CPU Current Speed>, <CPU Version>
  # Prints "<N> of <N> CPU sockets populated, <N> cores/<N> threads per CPU"
  # Prints "<N> total cores, <N> total threads"
  echo -e "${c_h2}  CPU:${c_0}"
  awk 'BEGIN { RS="\nHandle" } /Processor Information/' <<<"$dmidecode" |
    awk -F: -vH3="$c_h3" -vH2="$c_h2" -vH0="$c_0" -vH_IMP="$c_imp" '
      /Status:/       { SumSockets ++; if ($2 ~ /Populated/) PopulatedSockets ++ }
      /Core Count:/   { SumCores   += $2; CoresPerCpu = $2 }
      /Thread Count:/ { SumThreads += $2; ThreadsPerCpu = $2 }
      /Manufacturer:/ { if ($2 ~ /^ *$/)         next; Mfr         = $2; gsub(/  */, " ", Mfr) }
      /Family:/       { if ($2 ~ /^ *$|Other/)   next; Family      = $2; gsub(/  */, " ", Family) }
      /Current Speed:/{ if ($2 ~ /^ *$|Unknown/) next; CpuFreq     = $2; gsub(/  */, " ", CpuFreq) }
      /Version:/      { if ($2 ~ /^ *$/)         next; Version     = $2; gsub(/  */, " ", Version) }
      END {
        printf "    %s%d of %d CPU sockets populated, %d cores/%d threads per CPU\n",
          H_IMP, PopulatedSockets, SumSockets, CoresPerCpu, ThreadsPerCpu
        printf "    %d total cores, %d total threads\n", SumCores, SumThreads, H0
        printf "    %sMfr:%s %s\n", H3, H0, Mfr
        printf "    %sFam:%s %s\n", H3, H0, Family
        printf "    %sFreq:%s%s\n", H3, H0, CpuFreq
        printf "    %sVers:%s%s\n", H3, H0, Version
      }
    '
  # Prints "<N> MB (<N> GB) total"
  # Prints "<N> of <N> DIMMs populated (max capacity <N>)"
  echo -e "${c_h2}  Memory:${c_0}"
  awk 'BEGIN { RS="\nHandle" } /Physical Memory Array|Memory Device/' <<<"$dmidecode" |
    awk -vH3="$c_h3" -vH2="$c_h2" -vH0="$c_0" -vH_IMP="$c_imp" '
      /Size:/ { NumDimmSlots ++; if ($2 ~ /^[0-9]/) { NumDimms ++; SumRam+=$2 } }
      /Maximum Capacity:/ { MaxRam = $3" "$4 }
      END {
        printf "    %d MB (%.0f GB) total\n", SumRam, SumRam/1024
        printf "    %d of %d DIMMs populated (system max capacity %s)\n",
          NumDimms, NumDimmSlots, MaxRam
      }
    '
  echo -en $heading_separator
}


_CHECK_DISTRO() {
  OS_INDENT="             "
  # Get disto from redhat-release
  if [[ -r $1/etc/redhat-release ]]; then
    if grep -qs 'Red Hat Enterprise Linux .* release [456]' "$1/etc/redhat-release"; then
      [[ $(wc -l <"$1/etc/redhat-release") -gt 1 ]] &&
        distrorelease=${C[ORANGE]}$(sed "1!s/^/$OS_INDENT/" <"$1/etc/redhat-release") ||
          distrorelease=$(sed "1!s/^/$OS_INDENT/" <"$1/etc/redhat-release")
    else
      distrorelease=${C[ORANGE]}$(sed "1!s/^/$OS_INDENT/" "$1/etc/redhat-release" 2>/dev/null)
    fi
  # Otherwise, get it from /etc/os-release; otherwise, print the file names of release files
  else
    if source "$1/etc/os-release" 2>/dev/null; then
      distrorelease=${C[ORANGE]}$PRETTY_NAME
    elif [[ -n $(ls "$1"/etc/*{-release,_version} 2>/dev/null) ]]; then
      distrorelease=${C[ORANGE]}$(echo -n $(ls "$1"/etc/*{-release,_version} 2>/dev/null | sed 's,^.*/etc,etc,g'))
    else
      distrorelease="${C[RED]}Unable to detect"
    fi
  fi
}


_CHECK_KERNELBUILD() {
  # Get kernel build from dmesg somehow or another
  # 1st: if running on localhost and find it via `dmesg`, good
  if [[ $1 == / ]] && kernel_build=$(dmesg 2>/dev/null | grep 'Linux version'); then
    :
  # 2nd: if running on sosreport and find it via `dmesg` output file, good
  elif [[ $1 != / ]] && kernel_build=$(grep 'Linux version' "$1/sos_commands/general/dmesg" 2>/dev/null); then
    :
  # 3rd: if find it in var/log/dmesg, yay
  elif grep -qs 'Linux version' "$1/var/log/dmesg"; then
    kernel_build=$(grep 'Linux version' <"$1/var/log/dmesg" | tail -n1)
  # 4th: if find it in var/log/messages, woo hoo
  elif grep -qs 'kernel: Linux version' "$1/var/log/messages"; then
    kernel_build=$(grep 'kernel: Linux version' <"$1/var/log/messages" | tail -n1)
  # 5th and final: search in all old messages files -- this might be a bad idea
  else
    # To explain this last one: The goal is to find the most recent instance of "Linux version"
    # So this reverse-sorts by filename, searches through all files ending with the most recent file
    # This is obviously not very efficient, but it's the only way I've thought of to do it so far
    kernel_build=$(find "$1/var/log" -name 'messages?*' 2>/dev/null | sort -r | xargs zgrep -sh 'kernel: Linux version' 2>/dev/null | tail -n1)
  fi
}


_CHECK_SELINUX() {
  # Localhost?
  if [[ $1 == / ]]; then
    sestatus=$(sestatus)
  # Else, sosreport root
  else
    [[ -r $1/sestatus ]] && sestatus=$(<"$1/sestatus") || {
      [[ -r $1/etc/selinux/config ]] && sestatus2=$(<"$1/etc/selinux/config")
      eval $(egrep -io 'selinux=.|enforcing=.' "$1/proc/cmdline" | tr 'A-Z' 'a-z')
    }
  fi
  # We have definitive sestatus command output
  if [[ -n $sestatus ]]; then
    awk '
      /SELinux status/                    { status  = $NF }
      /Current mode/                      { mode    = $NF }
      /Mode from config file/             { cfgmode = $NF }
      /Loaded policy|Policy from config/  { policy  = $NF }
      END { 
        if (status == "disabled") print status
        else printf "%s (default: %s)\n", mode, cfgmode
      }
    ' <<<"$sestatus"
  # Have /etc/selinux/config output
  elif [[ -n $sestatus2 ]]; then
    awk -F= -vselinux="$selinux" -venforcing="$enforcing" '
      /^SELINUX=/     { mode = $2 }
      /^SELINUXTYPE=/ { policy = $2 }
      END {
        if (mode == "disabled") {
          if (selinux == 1)
            printf "enforcing via kernel arg (default: %s)\n", mode
          else
            print "disabled"
        }
        else {
          if (selinux == 0)
            printf "disabled via kernel arg (default: %s)\n", mode
          else if (enforcing == 0)
            printf "permissive via kernel arg (default: %s)\n", mode
          else if (enforcing == 1)
            printf "enforcing via kernel arg (default: %s)\n", mode
          else
            printf "status unknown (default: %s)\n", mode
        }
      }
    ' <<<"$sestatus2"
  # Only have /proc/cmdline
  else
    if [[ -n $selinux ]]; then
      [[ $selinux -eq 0 ]] && echo "disabled via kernel arg (default: unknown)"
      [[ $selinux -eq 1 ]] && echo "enforcing via kernel arg (default: unknown)"
    elif [[ -n $enforcing ]]; then
      [[ $enforcing -eq 0 ]] && echo "permissive via kernel arg (default: unknown)"
      [[ $enforcing -eq 1 ]] && echo "enforcing via kernel arg (default: unknown)"
    else
      echo "status unknown (default: unknown)"
    fi
  fi
}


OSINFO() {
  
  # These functions just set variables for later use
  _CHECK_DISTRO "$1"
  _CHECK_KERNELBUILD "$1"
  
  # Grab number of cpus from cpuinfo
  num_cpu=$(awk '/processor/{n++} END{print n}' "$1/proc/cpuinfo" 2>/dev/null)
  
  # Grab btime (in seconds since U.Epoch) from proc/stat
  btime=$(awk '/btime/{print $2}' "$1/proc/stat" 2>/dev/null)
  
  # If running on localhost
  if [[ $1 == / ]]; then
    systime=$(date)
    boottime=$(echo $(date --date=@$btime 2>/dev/null && echo " ($btime)"))
    uptime_input=$(uptime)
    runlevel=$(runlevel)
    initdefault=$(basename $(readlink -q /etc/systemd/system/default.target) 2>/dev/null) &&
      initdefault=${initdefault%.target} ||
        initdefault=$(awk -F: '/^id.*initdefault/ {print $2}' </etc/inittab)
    
  # Otherwise, running on sosreport
  else
    [[ -r $1/date ]] && systime=$(grep -v '/bin' <"$1/date")
    boottime=$(echo $(TZ=$(awk '!/\/bin/ {print $5}' "$1/date" 2>/dev/null) date --date=@$btime 2>/dev/null && echo " ($btime)"))
    uptime_input=$(grep -v '/bin' <"$1/uptime")
    [[ -r $1/sos_commands/startup/runlevel ]] && runlevel=$(<"$1/sos_commands/startup/runlevel")
    [[ -r $1/etc/inittab ]] && initdefault=$(awk -F: '/^id.*initdefault/ {print $2}' <"$1/etc/inittab")
  fi
  
  # Start printing stuff
  echo -e "${c_h1}OS${c_0}"
  echo -e "  ${c_h2}Hostname:${c_0}  ${c_imp}$(<"$1/proc/sys/kernel/hostname")${c_0}"
  echo -e "  ${c_h2}Distro:${c_0}    ${c_imp}$distrorelease${c_0}"
  echo -e "  ${c_h2}Kernel:${c_0}    ${c_imp}$(<"$1/proc/sys/kernel/osrelease")${c_0}"
  [[ -n $runlevel ]] &&
  echo -e "  ${c_h2}Runlevel:${c_0}  $runlevel (default: $initdefault)"
  echo -e "  ${c_h2}SELinux:${c_0}   $(_CHECK_SELINUX "$1")"
  [[ -n $systime ]] &&
  echo -e "  ${c_h2}Sys time:${c_0}  $systime"
  # Assuming have uptime input and detected num of cpus, print uptime, loadavg, etc
  [[ -n $uptime_input && -n $num_cpu ]] &&
  awk -vSYSTIME="$systime" -vBTIME="$boottime" -vNUM_CPU="$num_cpu" -vREDB="${C[RED]}" -vRED="${C[red]}" -vORANGE="${C[orange]}" -vGREEN="${C[green]}" -vH2="$c_h2" -vH0="$c_0" -vH_IMP="$c_imp" '
      !/load average/ { next }
      {
      Time = $1
      
      Uptime = gensub(/^ *[[:graph:]]+ up +(.+users?),.+/, "\\1", 1)
      
      Load[15] = $(NF)
      Load[5]  = $(NF-1)
      Load[1]  = $(NF-2)
      for (i in Load) {
        sub(/,/, "", Load[i])
        LP[i] = Load[i] * 100 / NUM_CPU
      }
      for (i in LP) {
        if (LP[i] < 70) Color[i] = GREEN
        if (LP[i] > 69) Color[i] = ORANGE
        if (LP[i] > 89) Color[i] = RED
        if (LP[i] > 99) Color[i] = REDB
      }
      
      if (SYSTIME == "")
        printf "  %sSys time:%s  %s\n", H2, H0, Time
      printf   "  %sBoot time:%s %s\n", H2, H0, BTIME
      printf   "  %sUptime:%s    %s\n", H2, H0, Uptime
      printf   "  %sLoadAvg:%s   %s (%s%.0f%%%s), %s (%s%.0f%%%s), %s (%s%.0f%%%s)\n",
        H2, H0, Load[1], Color[1], LP[1], H0, Load[5], Color[5], LP[5], H0, Load[15], Color[15], LP[15], H0
    }' <<<"$uptime_input"
  # Print info from proc/stat
  [[ -n $btime ]] &&
  awk -vH2="$c_h2" -vH0="$c_0" -vH_IMP="$c_imp" '
    /^cpu / {
      TotalTime = $2 + $3 + $4 + $5 + $6 + $7 + $8 + $9 + $10 + $11
      user    = $2 * 100 / TotalTime
      nice    = $3 * 100 / TotalTime
      sys     = $4 * 100 / TotalTime
      idle    = $5 * 100 / TotalTime
      iowait  = $6 * 100 / TotalTime
      irq     = $7 * 100 / TotalTime
      softirq = $8 * 100 / TotalTime
      steal   = $9 * 100 / TotalTime
     #guest      = $10
     #guest_nice = $11
    }
    /procs_running/ { procs_running = $2 }
    /procs_blocked/ { procs_blocked = $2 }
   
    END {
      printf "  %sCpu time since boot:%s\n    us %0.f%%, ni %0.f%%, sys %0.f%%, idle %0.f%%, iowait %0.f%%, irq %0.f%%, sftirq %0.f%%, steal %0.f%%\n",
        H2, H0, user, nice, sys, idle, iowait, irq, softirq, steal
      printf "  %sprocs_running (procs_blocked):%s\n    %d (%d)\n",
        H2, H0, procs_running, procs_blocked
    }
  ' <"$1/proc/stat"
  # Print kernel tainted-status
  echo -e "  ${c_h2}Kernel taint-check:${c_0} $(_CHECK_TAINTED "$1" H2)"
  # Print kernel cmdline from proc/cmdline
  echo -e "  ${c_h2}Kernel cmdline:${c_0}"
    fold -sw76 "$1/proc/cmdline" 2>/dev/null | sed 's,^,    ,'
  # Print and format dmesg kernel build from above
  echo -e "  ${c_h2}Kernel build from dmesg:${c_0}"
  [[ -n $kernel_build ]] &&
    sed -e 's,^\[.*\] Linux,Linux,' -e 's,^.*kernel: Linux,Linux,' <<<"$kernel_build" | fold -sw76 | sed 's,^,    ,' ||
      echo -e "    Unable to detect"
  echo -en $heading_separator
}


CPUINFO() {
  [[ -f $1 ]] && cpuinfo=$(<"$1") || cpuinfo=$(<"$1/proc/cpuinfo")
  
  # Get model of cpu and remove any extraneous crud
  model_cpu=$(awk -F: '/model name/{if (n>0) next; n++; print $2}' <<<"$cpuinfo" | sed -e 's,(R),,g' -e 's,(TM),,g' -e 's,  *, ,g')
  
  # If no model detected (e.g. on Itanium), try to use vendor+family
  [[ -z $model_cpu ]] && {
    vendor=$(awk -F: '/^vendor/{if (n>0) next; n++; print $2}' <<<"$cpuinfo")
    family=$(awk -F: '/^family/{if (n>0) next; n++; print $2}' <<<"$cpuinfo")
    model_cpu="$vendor$family"
  }
  
  # Get number of logical processors
  num_cpu=$(awk '/processor/{n++} END{print n}' <<<"$cpuinfo")
  
  # Get number of physical processors
  num_cpu_phys=$(grep "physical id" <<<"$cpuinfo" | sort -u | wc -l)
  
  # If "physical id" not found, assume 1 physical cpu
  [[ $num_cpu_phys -eq 0 ]] && num_cpu_phys=1
  
  # If number of logical != number of physical, get info on cores & threads
  if [[ $num_cpu -ne $num_cpu_phys ]]; then
    
    # Detect number of threads (logical) per cpu
    num_threads_per_cpu=$(awk '/siblings/{if (n>0) next; n++; print $3}' <<<"$cpuinfo")
    
    # Two possibile ways to detect number of cores
    cpu_cores=$(awk '/cpu cores/{if (n>0) next; n++; print $4}' <<<"$cpuinfo")
    core_id=$(grep "core id" <<<"$cpuinfo" | sort -u | wc -l)
    
    # The first is the most accurate, if it works
    if [[ -n $cpu_cores ]]; then
      num_cores_per_cpu=$cpu_cores
    
    # If the "cpu cores" doesn't work, "core id" method might (e.g. Itanium)
    elif [[ $core_id -gt 0 ]]; then
      num_cores_per_cpu=$core_id
    fi
    
    # If find cores & threads, setup the printing variables from them
    [[ -n $num_cores_per_cpu ]] && {
      cores=" ($((num_cpu_phys*num_cores_per_cpu)) CPU cores)"
      coresNthreads="\n  └─$num_threads_per_cpu threads, $num_cores_per_cpu cores each"
    }
  fi
  
  # Check important cpu flags
  # pae=physical address extensions  *  lm=64-bit  *  vmx=Intel hw-virt
  # svm=AMD hw-virt  *  ht=hyper-threading  *  aes=AES-NI
  cpu_flags=$(egrep -o "pae|lm|vmx|svm|ht|aes" <<<"$cpuinfo" | sort -u | sed ':a;N;$!ba;s/\n/,/g')
  [[ -n $cpu_flags ]] && cpu_flags="(flags: $cpu_flags)"
  
  # Print it all out
  echo -e "${c_h1}CPU${c_0}"
  echo -e "  ${c_imp}${num_cpu} logical processors${c_0}${cores}"
  echo -e "  ${num_cpu_phys}${model_cpu} ${cpu_flags}${coresNthreads}"
  echo -en $heading_separator
}


MEMINFO() {
  [[ -f $1 ]] && meminfo=$1 || meminfo=$1/proc/meminfo
  echo -e "${c_h1}MEMORY${c_0}"
  awk -vu="$mem_unit" -vORANGE="${C[orange]}" -vH_IMP="$c_imp" -vH2="$c_h2" -vH0="$c_0" '
    
    # Grab variables from meminfo
    /^MemTotal:/        { MemTotal  = $2 }
    /^MemFree:/         { MemFree   = $2 }
    /^Buffers:/         { BuffCache += $2 }
    /^Cached:/          { BuffCache += $2 }
    /^SwapCached:/      { BuffCache += $2 }
    /^LowTotal:/        { LowTotal  = $2 }
    /^LowFree:/         { LowFree   = $2 }
    /^SwapTotal:/       { SwapTotal = $2 }
    /^SwapFree:/        { SwapFree  = $2 }
    /^Dirty:/           { Dirty     = $2 }
    /^Shmem:/           { Shmem     = $2 }
    /^Slab:/            { Slab      = $2 }
    /^PageTables:/      { PageTables      = $2 }
    /^Hugepagesize:/    { Hugepagesize    = $2 }
    /^HugePages_Total:/ { HugepagesTotal  = $2 }
    /^HugePages_Free:/  { HugepagesFree   = $2 }
    
    END {
      
      # Compute additional variables
      MemUsed         = MemTotal - MemFree
      Mem_Percent     = MemUsed * 100 / MemTotal
      MemUsedNoBC     = MemUsed - BuffCache
      MemNoBC_Percent = MemUsedNoBC * 100 / MemTotal
      Dirty_Percent   = Dirty * 100 / MemTotal
      Shmem_Percent   = Shmem * 100 / MemTotal
      Slab_Percent    = Slab * 100 / MemTotal
      PT_Percent      = PageTables * 100 / MemTotal
      HP              = Hugepagesize * HugepagesTotal
      HP_PercentRam   = HP * 100 / MemTotal
      
      # If have hugepages, calculate in-use
      if (HugepagesTotal > 0) {
        HP_Used         = (HugepagesTotal - HugepagesFree) * Hugepagesize
        HP_Used_Percent = (HugepagesTotal - HugepagesFree) * 100 / HugepagesTotal
      }
      # Else, need to avoid divide-by-zero errors
      else {
        HP_Used         = 0
        HP_Used_Percent = 0
      }
      
      # If meminfo has LowTotal (my fedora box does not)...
      if (LowTotal ~ /[0-9]+/) {
        SHOW_Lowmem=1
        LowUsed         = LowTotal - LowFree
        LowUsed_Percent = LowUsed * 100 / LowTotal
      }
      # Else, avoid divide-by-zero and hide it
      else {
        SHOW_Lowmem=0
        LowTotal        = 0
        LowUsed         = 0
        LowUsed_Percent = 0
      }
      
      # If have swap-space...
      if (SwapTotal > 0) {
        SwapUsed      = SwapTotal - SwapFree
        Swap_Percent  = SwapUsed * 100 / SwapTotal
      }
      # Else, avoid divide-by-zero errors
      else {
        SwapUsed      = 0
        Swap_Percent  = 0
      }
      
      # If meminfo has Shmem, we show it; otherwise not
      if (Shmem ~ /[0-9]+/)
        SHOW_Shmem=1
      else
        SHOW_Shmem=0
      
      # If unit is set to megabytes or gigabytes,
      # do one round of division to convert to megabytes
      if (u == "m" || u == "g") {
        MemUsed     /= 1024
        MemTotal    /= 1024
        MemUsedNoBC /= 1024
        Dirty       /= 1024
        Shmem       /= 1024
        Slab        /= 1024
        PageTables  /= 1024
        HP          /= 1024
        if (HugepagesTotal > 0) HP_Used /= 1024
        if (LowTotal > 0) { LowUsed /= 1024; LowTotal /= 1024 }
        if (SwapTotal > 0) { SwapUsed /= 1024; SwapTotal /= 1024 }
      }
      
      # If unit is set to gigabytes, do an additional division round
      # and print units with 1 decimal-point of precision
      if (u == "g") {
      
        MemUsed     /= 1024
        MemTotal    /= 1024
        MemUsedNoBC /= 1024
        Dirty       /= 1024
        Shmem       /= 1024
        Slab        /= 1024
        PageTables  /= 1024
        HP          /= 1024
        if (HugepagesTotal > 0) HP_Used /= 1024
        if (LowTotal > 0) { LowUsed /= 1024; LowTotal /= 1024 }
        if (SwapTotal > 0) { SwapUsed /= 1024; SwapTotal /= 1024 }
        
        printf    "  %sRAM:%s\n", H2, H0
        printf    "    %s%.1f%s total%s [%.1f%s (%.0f%%) used]\n", H_IMP, MemTotal, u, H0, MemUsed, u, Mem_Percent
       #printf    "    %.1f%s (%.0f%%) used\n", MemUsed, u, Mem_Percent
        printf    "    %s%.1f%s (%.0f%%) used excluding buffers/cache%s\n", H_IMP, MemUsedNoBC, u, MemNoBC_Percent, H0
        if (Dirty_Percent > 5)
          printf  "    %s%.2f%s (%.0f%%) dirty%s\n", ORANGE, Dirty, u, Dirty_Percent, H0
        else
          printf  "    %.2f%s (%.0f%%) dirty\n", Dirty, u, Dirty_Percent
        
        printf    "  %sHugePages:%s\n", H2, H0
        if (HugepagesTotal == 0)
          printf  "    ZERO ram pre-allocated to HugePages\n"
        else {
          printf  "    %s%.1f%s pre-allocated to HugePages (%.0f%% of total ram)%s\n", H_IMP, HP, u, HP_PercentRam, H0
          printf  "    %.1f%s of HugePages (%.0f%%) in-use by applications\n", HP_Used, u, HP_Used_Percent
        }
        
        printf    "  %sLowMem/Slab/PageTables/Shmem:%s\n", H2, H0
        if (SHOW_Lowmem == 1)
          printf  "    %.1f%s (%.0f%%) of %.1f%s LowMem in-use\n", LowUsed, u, LowUsed_Percent, LowTotal, u
        printf    "    %.2f%s (%.0f%%) of total ram used for Slab\n", Slab, u, Slab_Percent
        printf    "    %.2f%s (%.0f%%) of total ram used for PageTables\n", PageTables, u, PT_Percent
        if (SHOW_Shmem == 1)
          printf  "    %.2f%s (%.0f%%) of total ram used for Shmem\n", Shmem, u, Shmem_Percent
        
        printf    "  %sSwap:%s\n", H2, H0
        if (SwapTotal == 0)
          printf  "    %sZERO system swap space configured%s\n", ORANGE, H0
        else
          printf  "    %.1f%s (%.0f%%) used of %.1f%s total\n", SwapUsed, u, Swap_Percent, SwapTotal, u
      }
      
      # Else, if unit is megabytes or kilobytes,
      # print units with 0 decimal-points of precision,
      # print percentages with an extra decimal-point of precision
      else {
        
        printf    "  %sRAM:%s\n", H2, H0
        printf    "    %s%.0f%s total%s [%.0f%s (%.1f%%) used]\n", H_IMP, MemTotal, u, H0, MemUsed, u, Mem_Percent
       #printf    "    %.0f%s (%.1f%%) used\n", MemUsed, u, Mem_Percent
        printf    "    %s%.0f%s (%.1f%%) used excluding buffers/cache%s\n", H_IMP, MemUsedNoBC, u, MemNoBC_Percent, H0
        if (Dirty_Percent > 5)
          printf  "    %s%.0f%s (%.1f%%) dirty%s\n", ORANGE, Dirty, u, Dirty_Percent, H0
        else
          printf  "    %.0f%s (%.1f%%) dirty\n", Dirty, u, Dirty_Percent
        
        printf    "  %sHugePages:%s\n", H2, H0
        if (HugepagesTotal == 0)
          printf  "    ZERO ram pre-allocated to HugePages\n"
        else {
          printf  "    %s%.0f%s pre-allocated to HugePages (%.1f%% of total ram)%s\n", H_IMP, HP, u, HP_PercentRam, H0
          printf  "    %.0f%s of HugePages (%.1f%%) in-use by applications\n", HP_Used, u, HP_Used_Percent
        }
        
        printf    "  %sLowMem/Slab/PageTables/Shmem:%s\n", H2, H0
        if (SHOW_Lowmem == 1)
          printf  "    %.0f%s (%.1f%%) of %.0f%s LowMem in-use\n", LowUsed, u, LowUsed_Percent, LowTotal, u
        printf    "    %.0f%s (%.1f%%) of total ram used for Slab\n", Slab, u, Slab_Percent
        printf    "    %.0f%s (%.1f%%) of total ram used for PageTables\n", PageTables, u, PT_Percent
        if (SHOW_Shmem == 1)
          printf  "    %.0f%s (%.1f%%) of total ram used for Shmem\n", Shmem, u, Shmem_Percent
        
        printf    "  %sSwap:%s\n", H2, H0
        if (SwapTotal == 0)
          printf  "    %sZERO system swap space configured%s\n", ORANGE, H0
        else
          printf  "    %.0f%s (%.1f%%) used of %.0f%s total\n", SwapUsed, u, Swap_Percent, SwapTotal, u
      }
    }
  ' <"$meminfo"
  echo -en $heading_separator
}


STORAGE() {
  echo -e "${c_h1}STORAGE${c_0}"
  if [[ $2 == --mpath ]]; then
    # Get multipath input from command, because $1 is system
    if [[ $1 == / && $UID -eq 0 ]]; then
      mpath_input=$(multipath -v4 -ll 2>/dev/null)
    # Get multipath input from sosreport file, if present
    elif [[ -r $1/sos_commands/devicemapper/multipath_-v4_-ll ]]; then
      mpath_input=$(<"$1/sos_commands/devicemapper/multipath_-v4_-ll")
    else
      mpath_input=
    fi
  fi 
  # If multipath --mpath option requested + returned good data, check to see if there are paths
  # If so, print out the mpath devices and hide their children from the later disk printout
  scsi_blacklist=
  if [[ -n $mpath_input ]] && ! egrep -q 'no.paths|multipath.conf.*not.exist' <<<"$mpath_input"; then
    echo -e "${c_h2}  Multipath:${c_0}"
    grep -B1 '^\[size=' <<<"$mpath_input" |
      awk '
        BEGIN { RS = "--" }
        {
          printf "    %s@%s\n", $1,
            gensub(/.*\[size=([0-9]+\.?[0-9]*) ?([[:alpha:]]{1,2})\].*/, "\\1 \\2", 1)
        }
      ' | sort | column -ts@
    scsi_blacklist=$(awk '/\\_ .* sd[[:alpha:]]+ / {printf "%s|", $3}' <<<"$mpath_input")
  fi
  # Get linux software raid (mdstat) info from where?
  if [[ $1 == / ]]; then
    mdstat_input=/proc/mdstat
  # Get mdstat input from sosreport, if present
  elif [[ -r $1/proc/mdstat ]]; then
    mdstat_input=$1/proc/mdstat
  fi
  if [[ -n $mdstat_input ]]; then
    # Get raid_components
    raid_components=$(grep ^md "$mdstat_input" 2>/dev/null | cut -d\  -f5- | egrep -o '[[:alpha:]]+' | sort -u | awk '{printf "%s|", $1}')
    # Append software raid component disks to the blacklist
    scsi_blacklist=$scsi_blacklist$raid_components
  fi
# FIXME:
#  scsi_blacklist=$scsi_blacklist$(awk '
#    /^md./ {
#      printf gensub(/.* ([[:alpha:]]+)[0-9]*\[[0-9]+\] .*/, "\\1|", "g")
#    }' <"$mdstat_input")

  # Yay, let's go.
  [[ -n $scsi_blacklist ]] && bl=y || { bl=n; scsi_blacklist=NULL; }
  [[ -f $1 ]] && partitions=$1 || partitions=$1/proc/partitions
  echo -e "  ${c_h2}Disks:${c_0}"
  egrep -v "${scsi_blacklist%?}" "$partitions" |
    awk -vblacklisted=$bl '
      $4 ~ /^hd.$|^sd[[:alpha:]]+$|^md.$|^r+om.$|^r?flash.$|^rd\/c.{1,2}d.{1,2}$|^ida\/c.d.$|^i2o\/hd[[:alpha:]]+$|^amiraid\/ar.{1,2}$|cbd\/.$|^cciss\/c.d.{1,2}$|^iseries\/vd[[:alpha:]]+$|^ataraid\/d.{1,2}$|^emd\/.{1,2}$|^carmel\/.{1,2}$|^mmcblk.$|^ub.$|^xvd[[:alpha:]]+$|^vd[[:alpha:]]+$/ {
        numdisks ++
        disksize =  $3/1024/1024
        sum_gb   += disksize
        disk[$4] =  disksize
      }
      END {
        if (blacklisted == "y")
          print  "    (Multipath and/or software raid components hidden)"
        printf   "    %d disks, totaling %.0f GiB (%.2f TiB)\n", numdisks, sum_gb, sum_gb/1024
        n = asorti(disk, disk_sorted)
        for (i = 1; i <= n; i++)
          printf "    %s   %.1f G\n", disk_sorted[i], disk[disk_sorted[i]]
      }
    '
  echo -en $heading_separator
}


LSPCI() {
  if [[ -z $1 ]]; then
    lspci_input=$(lspci)
  elif [[ -f $1 ]]; then
    lspci_input=$(<"$1")
  else
    lspci_input=$(<"$1/lspci")
  fi
  echo -e "${c_h1}LSPCI${c_0}"
  awk -vH_IMP="$c_imp" -vH2="$c_h2" -vH0="$c_0" '
    !/Ethernet controller:|Network controller:/ {
      next
    }
    {
      split($1, slot, ":")
      $1 = ""
      sub(" ", "")
      split($0, type, ":")
      iface[type[2]] ++
      if (!(slot[1] SUBSEP type[2] in slots)) {
        slots[slot[1], type[2]]
        slotcount[type[2]] ++
      }
    }
    END {
      printf "%s  Net:%s\n", H2, H0
      for (ifacetype in iface) {
        slotc = slotcount[ifacetype]
        typec = iface[ifacetype]
        ports = ""
        if (typec > 1)
          ports = H_IMP" {" slotc "," typec/slotc "-port}"H0
        printf "    %s%s%s\n", typec, ifacetype, ports
      }
    }
  ' <<<"$lspci_input"
  echo -e "${c_h2}  VGA:${c_0}"
  awk -F: '$2 ~ /^.... VGA/ { print "   "$3}' <<<"$lspci_input"
  echo -en $heading_separator
}



# I spent a long time wondering how I would end up implementing ip-addr functionality
# I couldn't come up with a lovely elegant awk-way
# In the end, this is probably one of the most expensive of the functions
# And certainly the most esoteric and complex...
# I'll make sure to add comments eventually, but who knows -- maybe I'll think of a better way to do it
IPADDR() {
  if [[ -z $1 ]]; then
    ip_addr=$(ip a)
  elif [[ -f $1 ]]; then
    ip_addr=$(<"$1")
  else
    ip_addr=$(<"$1/sos_commands/networking/ip_address")
  fi

  ip_addr=$(sed -e 's,^[0-9]*: ,\n&,' -e '1s,^,\n,' <<<"$ip_addr")
  ipdevs=$(awk -F: 'BEGIN {RS="\n\n"} {print $2}' <<<"$ip_addr" | egrep -v 'sit0')

  declare -A ip_input mac state ipv4 ipv4_alias slaveof

  echo -e "${c_h1}IP${c_0}"
  {
    echo "  Interface~Slave Of~MAC Address~State~IPv4 Address"
    echo "  =========~========~=================~=====~=================="

    for i in $ipdevs; do

      ip_input[$i]=$(awk "BEGIN {RS=\"\n\n\"} /^[0-9]+: $i:/" <<<"$ip_addr")

      slaveof[$i]=$(grep -q SLAVE <<<"${ip_input[$i]}" && egrep -o 'master [[:graph:]]+' <<<"${ip_input[$i]}" | awk '{print $2}' || echo "-")
      
      mac[$i]=$(egrep -q 'link/[[:graph:]]+ ..:..:..:..:..:..' <<<"${ip_input[$i]}" && awk '/link\/[[:graph:]]+ ..:..:..:..:..:../ {if ($2 == "00:00:00:00:00:00") print "-"; else print $2}' <<<"${ip_input[$i]}" || echo "-")

      state[$i]=$(grep -q "$i: .*,UP"  <<<"${ip_input[$i]}" && echo up || echo DOWN)

      if grep -q "inet .* ${i%@*}\$" <<<"${ip_input[$i]}"; then
        ipv4[$i]=$(awk "/inet .* ${i%@*}\$/ {print \$2}" <<<"${ip_input[$i]}")
        echo "  $i~${slaveof[$i]}~${mac[$i]}~${state[$i]}~${ipv4[$i]}"
      else
        ipv4[$i]="-"
        echo "  $i~${slaveof[$i]}~${mac[$i]}~${state[$i]}~${ipv4[$i]}"
        continue
      fi
      if grep -q "inet .* $i:" <<<"${ip_input[$i]}"; then
        for alias in $(awk "/inet .* $i:/ {print \$NF}" <<<"${ip_input[$i]}"); do
          ipv4_alias[$alias]=$(awk "/inet .* $alias\$/ {print \$2}" <<<"${ip_input[$i]}")
          echo "  $alias~-~-~up~${ipv4_alias[$alias]}"
        done
      fi
    done
  } | column -ts~ |
    awk -vH0="$c_0" -vH2="$c_h2" -vH3="$c_h3" '
      {
        if (NR <= 2) print H2 $0 H0
        else printf gensub(/(^  [[:graph:]]+ )/,   H3"\\1"H0, 1)"\n"
      }'
  echo -en $heading_separator
}



ETHTOOL() {
  # If running on local system, grab interfaces from /sys, and
  # prepare to use ethtool command
  if [[ -z $1 ]]; then
    ethdevs=$(ls /sys/class/net | egrep -v 'lo|sit0')
    __ethtool()   { ethtool $1; }
    __ethtool_i() { ethtool -i $1; }
  # If running on sosreport-root, grab interfaces from ethtool_iface files, and
  # prepare to pull ethtool info from same files
  elif ls "$1"/sos_commands/networking/ethtool* &>/dev/null; then
    cd "$1"/sos_commands/networking
    ethdevs=$(ls ethtool_[[:alpha:]]* | cut -d_ -f2)
    __ethtool()   { cat ethtool_$1; }
    __ethtool_i() { [[ -r ethtool_-i_$1 ]] && cat ethtool_-i_$1; }
  # Otherwise, set ethdevs to null
  else
    ethdevs=
  fi
  
  # If have ethdevs to work on ...
  if [[ -n $ethdevs ]]; then
    echo -e "${c_h1}ETHTOOL${c_0}"
    for i in $ethdevs; do
      echo -e "  $i~$(__ethtool $i |
      awk '
        /Link detected:/    { link = $3; sub(/yes/, "UP", link); sub(/no/, "DOWN", link) }
        /Speed:/            { spd = $2 }
        /Duplex:/           { dup = tolower($2) }
        /Auto-negotiation:/ { aneg = $2; sub(/on/, "Y", aneg); sub(/off/, "N", aneg) }
        END {
          if (link == "UP" && spd != "")
            linkdetails = " "spd" "dup" (autoneg="aneg")"
          printf "link=%s%s~", link, linkdetails
        }
      '
      )$(__ethtool_i $i |
      awk '
        BEGIN { driver="UNKNOWN"; drv_vers=""; fw_vers="" }
        /^driver:/           { if ($2 != "") driver=$2 }
        /^version:/          { if ($2 != "") drv_vers=" v"$2 }
        /^firmware-version:/ { if ($2 != "") fw_vers=" / fw "$2 }
        END { printf "drv %s%s%s\n", driver, drv_vers, fw_vers }
      '
    )"
    done | column -ts~ |
      awk -vH0="$c_0" -vU="$c_up" -vD="$c_down" '/DOWN/{print D $0 H0}  /UP/{print U $0 H0}'
    [[ ${PWD##*/} == networking ]] && cd - &>/dev/null
  fi
  echo -en $heading_separator
}


PROC_NET() {
  [[ -f $1 ]] && netdev=$1 || netdev=$1/proc/net/dev
  echo -e "${c_h1}NETDEV${c_0}"
  tail -n+3 "$netdev" | egrep -v 'lo:|sit0:' | sed 's,:, ,' |
    awk '
      {
        Interface[$1] = $1
        RxMBytes[$1]  = $2 / 1024 / 1024
        RxPackets[$1] = $3
        RxErrs[$1]    = $4
        RxDrop[$1]    = $5
        TxMBytes[$1]  = $10 / 1024 / 1024
        TxPackets[$1] = $11
        TxErrs[$1]    = $12
        TxDrop[$1]    = $13
      }
      END {
        print "  Interface~RxMBytes~RxPackets~RxErrs~RxDrop~TxMBytes~TxPackets~TxErrs~TxDrop"
        print "  =========~========~=========~======~======~========~=========~======~======"
        n = asorti(Interface, IF)
        for (i = 1; i <= n; i++)
          printf "  %s~%0.f~%d~%d~%d~%0.f~%d~%d~%d\n",
            IF[i], RxMBytes[IF[i]], RxPackets[IF[i]], RxErrs[IF[i]], RxDrop[IF[i]],
            TxMBytes[IF[i]], TxPackets[IF[i]], TxErrs[IF[i]], TxDrop[IF[i]]
      }
    ' | column -ts~ |
      awk -vH0="$c_0" -vH2="$c_h2" -vH3="$c_h3" '
        {
          if (NR <= 2) print H2 $0 H0
          else printf gensub(/(^  [[:graph:]]+ )/,   H3"\\1"H0, 1)"\n"
        }'
#  if [[ -d $1 ]]; then
#    echo -en $heading_separator
#    echo -e "${c_h1}SOCKSTAT${c_0}"
#    awk -vS="  " -vH3="$c_h3" -vH0="$c_0" '
#      { printf gensub(/^(.*:)/, S H3"\\1"H0, 1)"\n" }' <"$1/proc/net/sockstat"
#  fi
  echo -en $heading_separator
}


_CHECK_TAINTED() {
  tainted=$(<"$1/proc/sys/kernel/tainted")
  if [[ $tainted -eq 0 ]]; then
    echo "0 (kernel untainted)"
    return
  else
    case $2 in
      H0) unset indent   ;;
      H1) indent="  "    ;;
      H2) indent="    "  ;;
      H3) indent="      "
    esac
    taintvals=$(
      for taint in 536870912 268435456 4096 2048 1024 512 256 128 64 32 16 8 4 2 1; do
        if [[ $tainted -gt $taint ]]; then
          printf "$taint "
          tainted=$((tainted-taint))
        elif [[ $tainted -eq $taint ]]; then
          printf "$taint "                                                                                     
          break
        fi
      done
    )
  fi
  # See /usr/share/doc/kernel-doc*/Documentation/sysctl/kernel.txt
  # Or linux/kernel/panic.c
  t[1]="Proprietary module has been loaded"
  t[2]="Module has been forcibly loaded"
  t[4]="SMP with CPUs not designed for SMP"
  t[8]="User forced a module unload"
  t[16]="System experienced a machine check exception"
  t[32]="System has hit bad_page"
  t[64]="Userspace-defined naughtiness"
  t[128]="Kernel has oopsed before"
  t[256]="ACPI table overridden"
  t[512]="Taint on warning"
  t[1024]="Modules from drivers/staging are loaded"
  t[2048]="Working around severe firmware bug"
  t[4096]="Out-of-tree module has been loaded"
  t[268435456]="Hardware is unsupported"
  t[536870912]="Technology Preview code is loaded"
  echo "$taintvals"
  for n in $taintvals; do
    echo "$indent${t[$n]}"
  done
}


SYSCTL() {
  # VM PageSize (don't know how to find this from a sosreport,
  # but I doubt that will often be a problem)
  [[ $1 == / ]] && pgsz=$(getconf PAGESIZE) || pgsz=4
  echo -e "${c_h1}SYSCTLS${c_0}
  ${c_h2}kernel.${c_0}
    ${c_h3}osrelease:${c_0} $(<"$1/proc/sys/kernel/osrelease")
    ${c_h3}tainted:${c_0} $(_CHECK_TAINTED "$1" H3)
    ${c_h3}random.boot_id:${c_0} $(<"$1/proc/sys/kernel/random/boot_id")
    ${c_h3}random.entropy_avail:${c_0} $(<"$1/proc/sys/kernel/random/entropy_avail")
    ${c_h3}panic:${c_0} $(<"$1/proc/sys/kernel/panic") (seconds til reboot after panic)
    ${c_h3}hung_task_panic:${c_0} $(<"$1/proc/sys/kernel/hung_task_panic")
    ${c_h3}panic_on_oops:${c_0} $(<"$1/proc/sys/kernel/panic_on_oops")
    ${c_h3}panic_on_unrecovered_nmi:${c_0} $(<"$1/proc/sys/kernel/panic_on_unrecovered_nmi")
    ${c_h3}sysrq:${c_0} $(<"$1/proc/sys/kernel/sysrq")
    ${c_h3}sem:${c_0} $(awk -vS="$H3INDENT" '{print $1,$2,$3,$4; printf "%smax semaphores per array = %d\n%smax sems system-wide     = %d\n%smax ops per semop call   = %d\n%smax number of arrays     = %d\n", S,$1,S,$2,S,$3,S,$4}' <"$1/proc/sys/kernel/sem")
    ${c_h3}shmall (pages):${c_0} $(<"$1/proc/sys/kernel/shmall") ($(awk -vPGSZ="$pgsz" '{printf "%.1f G max total shared memory\n", $1*PGSZ/1024/1024}' <"$1/proc/sys/kernel/shmall"))
    ${c_h3}shmmax (bytes):${c_0} $(<"$1/proc/sys/kernel/shmmax") ($(awk '{printf "%.2f G max segment size\n", $1/1024/1024/1024}' <"$1/proc/sys/kernel/shmmax"))
    ${c_h3}shmmni (segments):${c_0} $(<"$1/proc/sys/kernel/shmmni") (max number of segs)
  ${c_h2}vm.${c_0}
    ${c_h3}dirty_ratio:${c_0} $(<"$1/proc/sys/vm/dirty_ratio") %
    ${c_h3}dirty_background_ratio:${c_0} $(<"$1/proc/sys/vm/dirty_background_ratio") %
    ${c_h3}dirty_bytes:${c_0} $(<"$1/proc/sys/vm/dirty_bytes") b
    ${c_h3}dirty_background_bytes:${c_0} $(<"$1/proc/sys/vm/dirty_background_bytes") b
    ${c_h3}dirty_expire_centisecs:${c_0} $(<"$1/proc/sys/vm/dirty_expire_centisecs")
    ${c_h3}dirty_writeback_centisecs:${c_0} $(<"$1/proc/sys/vm/dirty_writeback_centisecs")
    ${c_h3}nr_hugepages:${c_0} $(<"$1/proc/sys/vm/nr_hugepages") pages
    ${c_h3}overcommit_memory:${c_0} $(<"$1/proc/sys/vm/overcommit_memory")
    ${c_h3}overcommit_ratio:${c_0} $(<"$1/proc/sys/vm/overcommit_ratio") %
    ${c_h3}panic_on_oom:${c_0} $(<"$1/proc/sys/vm/panic_on_oom")
  ${c_h2}net.${c_0}
    ${c_h3}ipv4.icmp_echo_ignore_all:${c_0} $(<"$1/proc/sys/net/ipv4/icmp_echo_ignore_all")
    ${c_h3}ipv4.ip_forward:${c_0} $(<"$1/proc/sys/net/ipv4/ip_forward")
    ${c_h3}ipv4.tcp_max_orphans (sockets):${c_0} $(<"$1/proc/sys/net/ipv4/tcp_max_orphans") ($(awk '{printf "%d M @ max 64 K per orphan\n", $1*64/1024}' <"$1/proc/sys/net/ipv4/tcp_max_orphans"))
    ${c_h3}ipv4.tcp_mem (pages):${c_0} $(awk '{print $1,$2,$3}' <"$1/proc/sys/net/ipv4/tcp_mem") ($(awk -vPGSZ="$pgsz" '{printf "%.2f G, %.2f G, %.2f G\n", $1*PGSZ/1024/1024,$2*PGSZ/1024/1024,$3*PGSZ/1024/1024}' <"$1/proc/sys/net/ipv4/tcp_mem"))
    ${c_h3}ipv4.udp_mem (pages):${c_0} $(awk '{print $1,$2,$3}' <"$1/proc/sys/net/ipv4/udp_mem") ($(awk -vPGSZ="$pgsz" '{printf "%.2f G, %.2f G, %.2f G\n", $1*PGSZ/1024/1024,$2*PGSZ/1024/1024,$3*PGSZ/1024/1024}' <"$1/proc/sys/net/ipv4/udp_mem"))
    ${c_h3}ipv4.tcp_rmem (bytes):${c_0} $(awk '{print $1,$2,$3}' <"$1/proc/sys/net/ipv4/tcp_rmem") ($(awk '{printf "%d K, %d K, %d K\n", $1/1024,$2/1024,$3/1024}' <"$1/proc/sys/net/ipv4/tcp_rmem"))
    ${c_h3}ipv4.tcp_wmem (bytes):${c_0} $(awk '{print $1,$2,$3}' <"$1/proc/sys/net/ipv4/tcp_wmem") ($(awk '{printf "%d K, %d K, %d K\n", $1/1024,$2/1024,$3/1024}' <"$1/proc/sys/net/ipv4/tcp_wmem"))
    ${c_h3}ipv4.udp_rmem_min (bytes):${c_0} $(<"$1/proc/sys/net/ipv4/udp_rmem_min") ($(awk '{printf "%d K\n", $1/1024}' <"$1/proc/sys/net/ipv4/udp_rmem_min"))
    ${c_h3}ipv4.udp_wmem_min (bytes):${c_0} $(<"$1/proc/sys/net/ipv4/udp_wmem_min") ($(awk '{printf "%d K\n", $1/1024}' <"$1/proc/sys/net/ipv4/udp_wmem_min"))"
  echo -en $heading_separator
}


#-------------------------------------------------------------------------------
# BLEH
# Eventually I'll probably replace all of this with a python loader.
# Python's argparse is so much better than dealing with all this crap.

# If special options and files were provided ....
if [[ -n ${sfile[*]} ]]; then
  [[ -r ${sfile[B]} ]] && DMIDECODE "${sfile[B]}"
  [[ -r ${sfile[C]} ]] && CPUINFO "${sfile[C]}"
  [[ -r ${sfile[M]} ]] && MEMINFO "${sfile[M]}"
  [[ -r ${sfile[D]} ]] && STORAGE "${sfile[D]}"
  [[ -r ${sfile[L]} ]] && LSPCI "${sfile[L]}"
  [[ -r ${sfile[I]} ]] && IPADDR "${sfile[I]}"
  [[ -r ${sfile[N]} ]] && PROC_NET "${sfile[N]}"

# If SOSREPORT-ROOT provided, use that
elif [[ -n $sosroot ]]; then
  if [[ -n $bios ]]; then
    if [[ -r $sosroot/dmidecode ]]; then
      DMIDECODE "$sosroot/dmidecode"
    elif [[ -r $sosroot/sos_commands/kernel.dmidecode ]]; then
      DMIDECODE "$sosroot/sos_commands/kernel.dmidecode"
    fi
  fi
  [[ -n $os && -d $sosroot/proc ]] &&                       OSINFO "$sosroot"
  [[ -n $cpu   && -r $sosroot/proc/cpuinfo ]] &&            CPUINFO "$sosroot"
  [[ -n $mem   && -r $sosroot/proc/meminfo ]] &&            MEMINFO "$sosroot"
  if [[ -n $mpath && -r $sosroot/proc/partitions ]]; then   STORAGE "$sosroot" --mpath
  elif [[ -n $disks && -r $sosroot/proc/partitions ]]; then STORAGE "$sosroot"
  fi
  [[ -n $lspci && -r $sosroot/lspci ]] &&                   LSPCI "$sosroot"
  [[ -n $ethtool ]] &&                                      ETHTOOL "$sosroot"
  [[ -n $ip && -r $sosroot/sos_commands/networking/ip_address ]] &&
                                                            IPADDR "$sosroot"
  [[ -n $net && -d $sosroot/proc/net ]] &&                  PROC_NET "$sosroot"
  [[ -n $sysctl && -d $sosroot/proc/sys ]] &&               SYSCTL "$sosroot" 2>/dev/null
  
# If no SOSREPORT-ROOT provided, run checks against local system
else
  [[ $UID -eq 0 && -n $bios ]] &&     DMIDECODE
  [[ -n $os ]] &&                     OSINFO /
  [[ -n $cpu ]] &&                    CPUINFO /
  [[ -n $mem ]] &&                    MEMINFO /
  if [[ -n $mpath ]]; then            STORAGE / --mpath
  elif [[ -n $disks ]]; then          STORAGE /
  fi
  [[ -n $lspci ]] &&                  LSPCI
  [[ $UID -eq 0 && -n $ethtool ]] &&  ETHTOOL
  [[ -n $ip ]] &&                     IPADDR
  [[ -n $net ]] &&                    PROC_NET /
  [[ -n $sysctl ]] &&                 SYSCTL / 2>/dev/null

fi

